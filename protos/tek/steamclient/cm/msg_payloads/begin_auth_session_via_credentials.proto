//===-- begin_auth_session_via_credentials.proto - req & res payloads -----===//
//
// Copyright (c) 2025 Nuclearist <nuclearist@teknology-hub.com>
// Part of tek-steamclient, under the GNU General Public License v3.0 or later
// See https://github.com/teknology-hub/tek-steamclient/blob/main/COPYING for
//    license information.
// SPDX-License-Identifier: GPL-3.0-or-later
//
//===----------------------------------------------------------------------===//
syntax = "proto3";

package tek.steamclient.cm.msg_payloads;

import "tek/steamclient/cm/msg_payloads/auth_common.proto";

option optimize_for = LITE_RUNTIME;

// Session persistence types.
enum SessionPersistence {
  SESSION_PERSISTENCE_EPHEMERAL = 0;
  SESSION_PERSISTENCE_INVALID = -1;
  SESSION_PERSISTENCE_PERSISTENT = 1;
}

// Request message payload for
//    "Authentication.BeginAuthSessionViaCredentials#1".
message BeginAuthSessionViaCredentialsRequest {
  // Name of the account to authenticate.
  optional string account_name = 2;
  // Base64-encoded account password encrypted with account's public RSA key.
  optional string encrypted_password = 3;
  // Password encryption timestamp.
  optional uint64 encryption_timestamp = 4;
  // Requested token persistence type.
  optional tek.steamclient.cm.msg_payloads.SessionPersistence persistence = 7;
  // Website ID of the client.
  optional string website_id = 8;
  // Details of the device to authenticate.
  optional tek.steamclient.cm.msg_payloads.DeviceDetails device_details = 9;
}

// Response message payload for
//    "Authentication.BeginAuthSessionViaCredentials#1".
message BeginAuthSessionViaCredentialsResponse {
  // Unique client ID.
  optional uint64 client_id = 1;
  // Unique request ID.
  optional bytes request_id = 2;
  // Preferred polling interval, in seconds
  optional float interval = 3;
  // Types of confirmations supported by the account.
  repeated tek.steamclient.cm.msg_payloads.AllowedConfirmation allowed_confirmations = 4;
  // Steam ID of the account.
  optional uint64 steam_id = 5;
}
